package pcgui;
/**
 * This is the main frame of our application in which all other panels will be embedded
 */
import java.awt.CardLayout;
import java.awt.Desktop;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UIManager;

public class FEAORA extends JFrame implements PanelSwitcher, ParameterListReceiver,
		ActionListener {


	/**
	 * Serial ID Autogenerated
	 */
	private static final long serialVersionUID = 7931935352698279258L;

	private static FEAORA rootScreen;
	
	private ArrayList<Symbol> paramList;

	private JPanel lastPanel;
	private SettingsPanel settingsPanel;
	
	private JMenuBar menuBar;
	private JMenu mnFile;
	private JMenu mnTools;
	private JMenu mnHelp;
	private JMenuItem signout;
	private JMenuItem settings;
	private JMenuItem resetPin;
	private JMenuItem home;
	private JMenuItem help;
	private JMenuItem quit;
	
	private ImportModelPanel importModelPanel;
	private SetupParametersPanel setupParamPanel;
	private SetupVisualizationPanel setupVisualizationPanel;
	private SetupMapVisualizationPanel setupMapVisualizationPanel;
	private TabbedPane tabbedPanel;
	private ModelParser parser;
	private File importedFile;
	private static PreferenceManager pref;

	public FEAORA() {
		super("Framework for Experimental Analysis of Operational Research Algorithms");
		pref = PreferenceManager.getInstance();

	}
	//Initialize layout
	private void initialize() {
		frameInit();
		setLayout(new CardLayout());
		setBounds(0, 0, 1280, 720);
		menuBar = new JMenuBar();
		rootScreen.setJMenuBar(menuBar);

		mnFile = new JMenu("File");

		home = new JMenuItem("Home");
		home.addActionListener(this);



		quit = new JMenuItem("Quit");
		quit.addActionListener(this);

		mnFile.add(home);
		mnFile.add(quit);

		menuBar.add(mnFile);

		mnTools = new JMenu("Tools");

		settings = new JMenuItem("Settings");
		settings.addActionListener(this);


		mnTools.add(settings);


		menuBar.add(mnTools);

		mnHelp = new JMenu("Help");

		help = new JMenuItem("Help");
		help.addActionListener(this);

		mnHelp.add(help);

		menuBar.add(mnHelp);

		setVisible(true);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		EventQueue.invokeLater(new Runnable() {
			public void run() {

				try {
					rootScreen = new FEAORA();
					rootScreen.initialize();
					UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());

					rootScreen.onPanelSwitched(Constants.IMPORT_MODEL_PANEL_ID);
					
					rootScreen.setVisible(true);
					
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});

	}

	/**
	 * Handle callback to switch to new Panel
	 */
	public void onPanelSwitched(int panelID) {
		// TODO Auto-generated method stub
		if (lastPanel != null) {
			remove(lastPanel);
		}
		switch (panelID) {
	
			
	
			case Constants.IMPORT_MODEL_PANEL_ID:
				importModelPanel = new ImportModelPanel(this,this);
				lastPanel = importModelPanel;
				add("IMPORT_PANEL", importModelPanel);
	
				break;
			
			
			case Constants.SETUP_PARAM_PANEL_ID:
				
				setupVisualizationPanel = new SetupVisualizationPanel(this, this);
			    setupVisualizationPanel.initParamList(null,parser);
			    setupMapVisualizationPanel =  new SetupMapVisualizationPanel(this, this);
			    setupMapVisualizationPanel.initParamList(null,parser);
				setupParamPanel = new SetupParametersPanel(this,this);
				setupParamPanel.setImportedFile(importedFile);
			    setupParamPanel.initParamList(paramList,parser);
			    setupParamPanel.setVisualizationPanel(setupVisualizationPanel);
			    setupParamPanel.setMapVisualizationPanel(setupMapVisualizationPanel);
			    tabbedPanel=new TabbedPane(setupParamPanel,setupVisualizationPanel,setupMapVisualizationPanel );
				lastPanel = tabbedPanel;
				add("SETUP_PARAM_PANEL", tabbedPanel);
		
				break;
		}
		setVisible(true);
		invalidate();

	}

	/**
	 * Disable the menu items that are allowed only when logged-in
	 */
	private void disableMenuItems() {
		home.setEnabled(false);
		signout.setEnabled(false);
		settings.setEnabled(false);
		resetPin.setEnabled(false);
		menuBar.invalidate();
	}

	/**
	 * Disable the menu items that are allowed only when logged-in
	 */
	private void enableMenuItems() {
		home.setEnabled(true);
		signout.setEnabled(true);
		settings.setEnabled(true);
		resetPin.setEnabled(true);
		menuBar.invalidate();
	}

	/**
	 * handling Menu bar actions
	 */
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		if (home != null && home == e.getSource()) {
			onPanelSwitched(Constants.IMPORT_MODEL_PANEL_ID);
		}  else if (quit != null && quit == e.getSource()) {
			System.exit(0);
		} else if (settings != null && settings == e.getSource()) {
			JOptionPane.showMessageDialog(null, "Current FEAORA version does not require extra settings.");
			//String api_key=pref.getString("GEOCODE_API_KEY", "");
			//System.out.println("Geocode API key="+api_key);
			//String new_api_key=JOptionPane.showInputDialog("Google Geocode API Key", api_key);
			//System.out.println("New Geocode API key="+new_api_key);
			//if(new_api_key!=null){
			//	pref.putString("GEOCODE_API_KEY", new_api_key);
			//}
			
			
		} else if (help != null && help == e.getSource()) {
			if (Desktop.isDesktopSupported()) {
			    try {
			    	File file = new File("./res/Tutorial.pdf");

			        Desktop.getDesktop().open(file);
			    } catch (IOException ex) {
			        // no application registered for PDFs
			    	ex.printStackTrace();
			    }
			}
		}
	}
	


	@Override
	public void onParamListReceived(File file, ArrayList<Symbol> list, ModelParser parser) {
		importedFile = file;
		paramList = list;
		this.parser = parser;
		System.out.println("INSIDE ROOTSCREEN:");
		for (int i = 0; i < paramList.size(); i++) {
			  Symbol s = (Symbol) paramList.get(i);
			  System.out.println(s.name + ": "+s.typeString+": "+ s.get());
	  }	
		
	}
	
	public ModelParser getParser(){
		return parser;
	}
	


}
